(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-number-formatter', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng-number-formatter'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterComponent = /** @class */ (function () {
        function NgNumberFormatterComponent() {
        }
        /**
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var incomingString = this.ngNumber.toString();
                /** @type {?} */
                var incomingNumber = parseFloat(incomingString);
                if (isNaN(incomingNumber)) {
                    // if its not a number then return as it is!
                    this.ngOutputNumber = incomingString;
                }
                else {
                    // handling minus sign for negative numbers
                    this.ngOutputNumber = (incomingNumber > 0) ? '' : '-';
                    incomingNumber = Math.abs(incomingNumber);
                    switch (this.ngFormat) {
                        case 'emoji':
                            this.ngOutputNumber += this.emojifyNumber(incomingNumber);
                            break;
                        case 'comma':
                            this.ngOutputNumber += this.numberWithCommas(incomingNumber);
                            break;
                        case 'metrics-name':
                            this.ngOutputNumber += this.numberWithMetricsName(incomingNumber);
                            break;
                        case 'metrics-symbol':
                            this.ngOutputNumber += this.numberWithMetricsSymbol(incomingNumber);
                            break;
                        default:
                            // metrics symbol based (K thousand, M million, B billion)
                            this.ngOutputNumber += this.numberWithMetricsSymbol(incomingNumber);
                            // if someone sets the ngFormat value not as string or other than the expexted formats
                            // console.log(`Ng-Number-Formatter: String value is requried¬†for the property ngFormat ['', 'metrics-symbol', 'metrics-name', 'comma', 'emoji']`);
                            break;
                    }
                }
            };
        /**
         * @param {?} num
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.emojifyNumber = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                /** @type {?} */
                var emojifiedString = '';
                /** @type {?} */
                var emojiArray = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
                if (num <= 10) {
                    emojifiedString = emojiArray[num];
                }
                else {
                    /** @type {?} */
                    var numString = num.toString();
                    for (var i = 0; i < numString.length; i++) {
                        emojifiedString += isNaN(numString.charAt(i)) ? numString.charAt(i) : emojiArray[numString.charAt(i)];
                    }
                }
                return emojifiedString;
            };
        /**
         * @param {?} num
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.beautifyNumber = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                /** @type {?} */
                var numString = num;
                if (num > 0) {
                    if (num % 10 == 1 && num != 11)
                        numString = num + "st";
                    if (num % 10 == 2 && num != 12)
                        numString = num + "nd";
                    if (num % 10 == 3 && num != 13)
                        numString = num + "rd";
                    if ((num % 10 != 1 && num % 10 != 2 && num % 10 != 3) || (num == 11 || num == 12 || num == 13))
                        numString = num + "th";
                }
                return numString;
            };
        /**
         * @param {?} num
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.numberWithCommas = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                // setting maximum to 15, so that its the maximum value possible for JS
                return num.toLocaleString('en-US', { maximumFractionDigits: 15 });
            };
        /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.numberWithMetricsName = /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
            function (num, digits) {
                if (digits === void 0) {
                    digits = 1;
                }
                /** @type {?} */
                var si = [
                    { value: 1E24, symbol: " septillion" },
                    { value: 1E21, symbol: " sextillion" },
                    { value: 1E18, symbol: " quintillion" },
                    { value: 1E15, symbol: " quadrillion" },
                    { value: 1E12, symbol: " trillion" },
                    { value: 1E9, symbol: " billion" },
                    { value: 1E6, symbol: " million" },
                    { value: 1E3, symbol: " thousand" }
                ];
                /** @type {?} */
                var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
                for (var i = 0; i < si.length; i++) {
                    if (num >= si[i].value) {
                        return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
                    }
                }
                return num.toFixed(digits).replace(rx, "$1");
            };
        /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.numberWithMetricsSymbol = /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
            function (num, digits) {
                if (digits === void 0) {
                    digits = 1;
                }
                /** @type {?} */
                var si = [
                    { value: 1E24, symbol: "Y" },
                    { value: 1E21, symbol: "Z" },
                    { value: 1E18, symbol: "E" },
                    { value: 1E15, symbol: "P" },
                    { value: 1E12, symbol: "T" },
                    { value: 1E9, symbol: "B" },
                    { value: 1E6, symbol: "M" },
                    { value: 1E3, symbol: "K" }
                ];
                /** @type {?} */
                var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
                for (var i = 0; i < si.length; i++) {
                    if (num >= si[i].value) {
                        return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
                    }
                }
                return num.toFixed(digits).replace(rx, "$1");
            };
        NgNumberFormatterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-number-formatter',
                        inputs: ['ngNumber', 'ngFormat'],
                        template: '<span>{{ngOutputNumber}}</span>',
                    },] },
        ];
        /** @nocollapse */
        NgNumberFormatterComponent.ctorParameters = function () { return []; };
        return NgNumberFormatterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterModule = /** @class */ (function () {
        function NgNumberFormatterModule() {
        }
        NgNumberFormatterModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            NgNumberFormatterComponent
                        ],
                        exports: [
                            NgNumberFormatterComponent
                        ]
                    },] },
        ];
        return NgNumberFormatterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgNumberFormatterModule = NgNumberFormatterModule;
    exports.…µa = NgNumberFormatterComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,