{"version":3,"sources":["ng://ng-number-formatter/src/app/modules/ng-number-formatter/ng-number-formatter.component.ts","ng://ng-number-formatter/src/app/modules/ng-number-formatter/ng-number-formatter.module.ts"],"names":["NgNumberFormatterComponent","prototype","ngOnInit","incomingString","this","ngNumber","toString","incomingNumber","parseFloat","isNaN","ngOutputNumber","Math","abs","ngFormat","emojifyNumber","numberWithCommas","numberWithMetricsName","numberWithMetricsSymbol","num","emojifiedString","emojiArray","numString","i","length","charAt","beautifyNumber","toLocaleString","maximumFractionDigits","digits","si","value","symbol","rx","toFixed","replace","Component","args","selector","inputs","template","NgNumberFormatterModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ng-number-formatter',\n  inputs: ['ngNumber', 'ngFormat'],\n  template: '<span>{{ngOutputNumber}}</span>',\n})\n\nexport class NgNumberFormatterComponent implements OnInit {\n  ngNumber: number | string;\n  ngFormat: string;\n  ngOutputNumber: string;\n\n  constructor() { }\n\n  ngOnInit() {\n    // to process both numbers and strings\n    var incomingString = this.ngNumber.toString();\n    var incomingNumber = parseFloat(incomingString);\n    if (isNaN(incomingNumber)) {\n      // if its not a number then return as it is!\n      this.ngOutputNumber = incomingString;\n    } else {\n      // handling minus sign for negative numbers\n      this.ngOutputNumber = (incomingNumber > 0) ? '' : '-';\n      incomingNumber = Math.abs(incomingNumber);\n      switch (this.ngFormat) {\n        case 'emoji':\n          this.ngOutputNumber += this.emojifyNumber(incomingNumber);\n          break;\n        case 'comma':\n          this.ngOutputNumber += this.numberWithCommas(incomingNumber);\n          break;\n        case 'metrics-name':\n          this.ngOutputNumber += this.numberWithMetricsName(incomingNumber);\n          break;\n        case 'metrics-symbol':\n          this.ngOutputNumber += this.numberWithMetricsSymbol(incomingNumber);\n          break;\n        default:\n          // metrics symbol based (K thousand, M million, B billion)\n          this.ngOutputNumber += this.numberWithMetricsSymbol(incomingNumber);\n          // if someone sets the ngFormat value not as string or other than the expexted formats\n          // console.log(`Ng-Number-Formatter: String value is requried for the property ngFormat ['', 'metrics-symbol', 'metrics-name', 'comma', 'emoji']`);\n          break;\n      }\n    }\n  }\n\n  emojifyNumber(num) {\n    var emojifiedString = '';\n    var emojiArray = ['0️⃣', '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '������'];\n    if (num <= 10) {\n      emojifiedString = emojiArray[num];\n    } else {\n      var numString = num.toString();\n      for (var i = 0; i < numString.length; i++) {\n        emojifiedString += isNaN(numString.charAt(i)) ? numString.charAt(i) : emojiArray[numString.charAt(i)];\n      }\n    }\n\n    return emojifiedString;\n  }\n\n  beautifyNumber(num) {\n    var numString = num;\n    if (num > 0) {\n      if (num % 10 == 1 && num != 11) numString = `${num}st`;\n      if (num % 10 == 2 && num != 12) numString = `${num}nd`;\n      if (num % 10 == 3 && num != 13) numString = `${num}rd`;\n      if ((num % 10 != 1 && num % 10 != 2 && num % 10 != 3) || (num == 11 || num == 12 || num == 13)) numString = `${num}th`;\n    }\n    return numString;\n  }\n\n  numberWithCommas(num) {\n    // setting maximum to 15, so that its the maximum value possible for JS\n    return num.toLocaleString('en-US', { maximumFractionDigits: 15 });\n  }\n\n  numberWithMetricsName(num, digits = 1) {\n    // https://en.wikipedia.org/wiki/Peta-\n    var si = [\n      { value: 1E24, symbol: \" septillion\" },\n      { value: 1E21, symbol: \" sextillion\" },\n      { value: 1E18, symbol: \" quintillion\" },\n      { value: 1E15, symbol: \" quadrillion\" },\n      { value: 1E12, symbol: \" trillion\" },\n      { value: 1E9, symbol: \" billion\" },\n      { value: 1E6, symbol: \" million\" },\n      { value: 1E3, symbol: \" thousand\" }\n    ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    for (var i = 0; i < si.length; i++) {\n      if (num >= si[i].value) {\n        return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n      }\n    }\n    return num.toFixed(digits).replace(rx, \"$1\");\n  }\n\n  numberWithMetricsSymbol(num, digits = 1) {\n    // https://en.wikipedia.org/wiki/Peta-\n    var si = [\n      { value: 1E24, symbol: \"Y\" },\n      { value: 1E21, symbol: \"Z\" },\n      { value: 1E18, symbol: \"E\" },\n      { value: 1E15, symbol: \"P\" },\n      { value: 1E12, symbol: \"T\" },\n      { value: 1E9, symbol: \"B\" },\n      { value: 1E6, symbol: \"M\" },\n      { value: 1E3, symbol: \"K\" }\n    ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    for (var i = 0; i < si.length; i++) {\n      if (num >= si[i].value) {\n        return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n      }\n    }\n    return num.toFixed(digits).replace(rx, \"$1\");\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgNumberFormatterComponent } from './ng-number-formatter.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgNumberFormatterComponent\n  ],\n  exports: [\n    NgNumberFormatterComponent\n  ]\n})\nexport class NgNumberFormatterModule { }\n"]}