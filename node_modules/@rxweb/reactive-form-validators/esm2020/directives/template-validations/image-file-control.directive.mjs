import { Input, Directive, forwardRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
import { of } from 'rxjs';
import * as i0 from "@angular/core";
const VALIDATOR_CONFIG = "validatorConfig";
export class ImageFileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.element = elementRef.nativeElement;
    }
    set image(config) {
        this.imageValidation = APP_VALIDATORS.image(config);
    }
    setConfig(control) {
        let image = "image";
        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])
            this[image] = control[VALIDATOR_CONFIG][image];
        this.isProcessed = true;
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        if (this.imageValidation) {
            return this.imageValidation(control, this.element.files);
        }
        return of(null);
    }
}
ImageFileControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ImageFileControlDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ImageFileControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: ImageFileControlDirective, selector: "input[type=file]", inputs: { image: "image" }, providers: [{
            provide: NG_ASYNC_VALIDATORS,
            useExisting: forwardRef(() => ImageFileControlDirective),
            multi: true
        }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ImageFileControlDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "input[type=file]",
                    providers: [{
                            provide: NG_ASYNC_VALIDATORS,
                            useExisting: forwardRef(() => ImageFileControlDirective),
                            multi: true
                        }]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { image: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBb0MsbUJBQW1CLEVBQWlCLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFTM0MsTUFBTSxPQUFPLHlCQUF5QjtJQVVsQyxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBUjFDLGdCQUFXLEdBQVcsS0FBSyxDQUFDO1FBU3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQXFCLENBQUM7SUFDcEQsQ0FBQztJQU5ELElBQWEsS0FBSyxDQUFDLE1BQWtCO1FBQ25DLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBTUQsU0FBUyxDQUFDLE9BQXVCO1FBQzdCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUNwQixJQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUM5RSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUF3QjtRQUMvQixJQUFHLENBQUMsSUFBSSxDQUFDLFdBQVc7WUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixJQUFHLElBQUksQ0FBQyxlQUFlLEVBQUM7WUFDcEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNEO1FBQ0MsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7c0hBNUJRLHlCQUF5QjswR0FBekIseUJBQXlCLHVFQU52QixDQUFDO1lBQ1IsT0FBTyxFQUFFLG1CQUFtQjtZQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDO1lBQ3hELEtBQUssRUFBRSxJQUFJO1NBQ2QsQ0FBQzsyRkFFTyx5QkFBeUI7a0JBUnJDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFLENBQUM7NEJBQ1IsT0FBTyxFQUFFLG1CQUFtQjs0QkFDNUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUM7NEJBQ3hELEtBQUssRUFBRSxJQUFJO3lCQUNkLENBQUM7aUJBQ0w7aUdBT2dCLEtBQUs7c0JBQWpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0LCBEaXJlY3RpdmUgLGZvcndhcmRSZWYsRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7VmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sLCBOR19BU1lOQ19WQUxJREFUT1JTLEFzeW5jVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge0ltYWdlQ29uZmlnfSBmcm9tICcuLi8uLi9tb2RlbHMvY29uZmlnJ1xyXG5pbXBvcnQgeyBBUFBfVkFMSURBVE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdC9hcHAtdmFsaWRhdG9ycy5jb25zdFwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5jb25zdCBWQUxJREFUT1JfQ09ORklHID0gXCJ2YWxpZGF0b3JDb25maWdcIjtcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogXCJpbnB1dFt0eXBlPWZpbGVdXCIsXHJcbiAgICBwcm92aWRlcnM6IFt7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfQVNZTkNfVkFMSURBVE9SUyxcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlKSxcclxuICAgICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEltYWdlRmlsZUNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBBc3luY1ZhbGlkYXRvciAge1xyXG4gICAgZWxlbWVudDphbnlcclxuICAgIGlzUHJvY2Vzc2VkOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGltYWdlVmFsaWRhdGlvbjpGdW5jdGlvbjtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgaW1hZ2UoY29uZmlnOkltYWdlQ29uZmlnKXtcclxuICAgICAgdGhpcy5pbWFnZVZhbGlkYXRpb24gPSBBUFBfVkFMSURBVE9SUy5pbWFnZShjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZil7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29uZmlnKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sKXtcclxuICAgICAgICBsZXQgaW1hZ2UgPSBcImltYWdlXCI7XHJcbiAgICAgICAgaWYoIXRoaXNbaW1hZ2VdICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR10gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXVtpbWFnZV0pXHJcbiAgICAgICAgICB0aGlzW2ltYWdlXSA9IGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR11baW1hZ2VdO1xyXG4gICAgICB0aGlzLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBQcm9taXNlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB8IE9ic2VydmFibGU8VmFsaWRhdGlvbkVycm9ycyB8IG51bGw+IHtcclxuICAgICAgaWYoIXRoaXMuaXNQcm9jZXNzZWQpXHJcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29udHJvbCk7XHJcbiAgICAgIGlmKHRoaXMuaW1hZ2VWYWxpZGF0aW9uKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmltYWdlVmFsaWRhdGlvbihjb250cm9sLHRoaXMuZWxlbWVudC5maWxlcyk7XHJcbiAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9ICAgIFxyXG59XHJcbiJdfQ==