import { RegexValidator } from "../util/regex-validator";
import { ObjectMaker } from "../util/object-maker";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { getConfigObject } from "../util/config-provider";
import { alphabet, alphaWithWhitespace, alphanumeric, alphanumericWithWitespace } from "../util/alphabet-regex.locale";
import { ReactiveFormConfig } from "../util/reactive-form-config";
export function alphaValidation(configModel, control, regExps, key) {
    let config = getConfigObject(configModel, control);
    if (ValidatorValueChecker.pass(control, config)) {
        regExps = getRegex(key, regExps, config);
        var isValid = (!config || !config.allowWhiteSpace) ?
            RegexValidator.isValid(control.value, regExps[0]) :
            RegexValidator.isValid(control.value, regExps[1]);
        if (!isValid)
            return ObjectMaker.toJson(key, config, [control.value]);
    }
    return ObjectMaker.null();
}
function getRegex(key, regExps, config) {
    if (config.allowCharacters)
        if (config.allowWhiteSpace)
            regExps[1] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);
        else
            regExps[0] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);
    switch (key) {
        case "alpha":
            var alphaLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alpha ? ReactiveFormConfig.json.defaultValidationLocale.alpha : "";
            return [
                alphaLocale && alphaLocale in alphabet ? alphabet[alphaLocale] : regExps[0],
                alphaLocale && alphaLocale in alphaWithWhitespace ? alphaWithWhitespace[alphaLocale] : regExps[1]
            ];
            break;
        case "alphaNumeric":
            var alphaNumericLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric ? ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric : "";
            return [
                alphaNumericLocale && alphaNumericLocale in alphanumeric ? alphanumeric[alphaNumericLocale] : regExps[0],
                alphaNumericLocale && alphaNumericLocale in alphanumericWithWitespace ? alphanumericWithWitespace[alphaNumericLocale] : regExps[1]
            ];
            break;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaGEtdmFsaWRhdGlvbi5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy92YWxpZGF0b3JzLWZ1bmN0aW9uL2FscGhhLXZhbGlkYXRpb24uZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2SCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRSxNQUFNLFVBQVUsZUFBZSxDQUMzQixXQUF3QixFQUN4QixPQUF3QixFQUN4QixPQUFpQixFQUNqQixHQUFXO0lBRVgsSUFBSSxNQUFNLEdBQUcsZUFBZSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDN0MsT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUNoRCxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRCxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU87WUFDUixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQy9EO0lBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTTtJQUNsQyxJQUFJLE1BQU0sQ0FBQyxlQUFlO1FBQ3RCLElBQUksTUFBTSxDQUFDLGVBQWU7WUFDdEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLGdCQUFnQixNQUFNLENBQUMsZUFBZSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7O1lBRXpFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsTUFBTSxDQUFDLGVBQWUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pGLFFBQVEsR0FBRyxFQUFFO1FBQ1QsS0FBSyxPQUFPO1lBQ1IsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsSUFBSSxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDblAsT0FBTztnQkFDSCxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUMzRSxXQUFXLElBQUksV0FBVyxJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNwRyxDQUFDO1lBQ0YsTUFBTTtRQUNWLEtBQUssY0FBYztZQUNmLElBQUksa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsSUFBSSxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFFeFEsT0FBTztnQkFDSCxrQkFBa0IsSUFBSSxrQkFBa0IsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN4RyxrQkFBa0IsSUFBSSxrQkFBa0IsSUFBSSx5QkFBeUIsQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNySSxDQUFDO1lBQ0YsTUFBTTtLQUNiO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBYnN0cmFjdENvbnRyb2xcclxufSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4uL3V0aWwvb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IEFscGhhQ29uZmlnIH0gZnJvbSBcIi4uL21vZGVscy9jb25maWcvYWxwaGEtY29uZmlnXCI7XHJcbmltcG9ydCB7IFZhbGlkYXRvclZhbHVlQ2hlY2tlciB9IGZyb20gXCIuLi91dGlsL3ZhbGlkYXRvci12YWx1ZS1jaGVja2VyXCI7XHJcbmltcG9ydCB7IGdldENvbmZpZ09iamVjdCB9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBhbHBoYWJldCwgYWxwaGFXaXRoV2hpdGVzcGFjZSwgYWxwaGFudW1lcmljLCBhbHBoYW51bWVyaWNXaXRoV2l0ZXNwYWNlIH0gZnJvbSBcIi4uL3V0aWwvYWxwaGFiZXQtcmVnZXgubG9jYWxlXCI7XHJcbmltcG9ydCB7IFJlYWN0aXZlRm9ybUNvbmZpZyB9IGZyb20gXCIuLi91dGlsL3JlYWN0aXZlLWZvcm0tY29uZmlnXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxwaGFWYWxpZGF0aW9uKFxyXG4gICAgY29uZmlnTW9kZWw6IEFscGhhQ29uZmlnLFxyXG4gICAgY29udHJvbDogQWJzdHJhY3RDb250cm9sLFxyXG4gICAgcmVnRXhwczogUmVnRXhwW10sXHJcbiAgICBrZXk6IHN0cmluZ1xyXG4pIHtcclxuICAgIGxldCBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnTW9kZWwsIGNvbnRyb2wpO1xyXG4gICAgaWYgKFZhbGlkYXRvclZhbHVlQ2hlY2tlci5wYXNzKGNvbnRyb2wsIGNvbmZpZykpIHtcclxuICAgICAgICByZWdFeHBzID0gZ2V0UmVnZXgoa2V5LCByZWdFeHBzLCBjb25maWcpO1xyXG4gICAgICAgIHZhciBpc1ZhbGlkID0gKCFjb25maWcgfHwgIWNvbmZpZy5hbGxvd1doaXRlU3BhY2UpID9cclxuICAgICAgICAgICAgUmVnZXhWYWxpZGF0b3IuaXNWYWxpZChjb250cm9sLnZhbHVlLCByZWdFeHBzWzBdKSA6XHJcbiAgICAgICAgICAgIFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQoY29udHJvbC52YWx1ZSwgcmVnRXhwc1sxXSk7XHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkKVxyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKGtleSwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmVnZXgoa2V5LCByZWdFeHBzLCBjb25maWcpIHtcclxuICAgIGlmIChjb25maWcuYWxsb3dDaGFyYWN0ZXJzKVxyXG4gICAgICAgIGlmIChjb25maWcuYWxsb3dXaGl0ZVNwYWNlKVxyXG4gICAgICAgICAgICByZWdFeHBzWzFdID0gbmV3IFJlZ0V4cChgXlswLTlhLXpBLVogQCR7Y29uZmlnLmFsbG93Q2hhcmFjdGVyc31dKyRgLCBgYCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZWdFeHBzWzBdID0gbmV3IFJlZ0V4cChgXlswLTlhLXpBLVogQCR7Y29uZmlnLmFsbG93Q2hhcmFjdGVyc31dKyRgLCBgYCk7XHJcbiAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIGNhc2UgXCJhbHBoYVwiOlxyXG4gICAgICAgICAgICB2YXIgYWxwaGFMb2NhbGUgPSBjb25maWcubG9jYWxlID8gY29uZmlnLmxvY2FsZSA6IFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uICYmIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmRlZmF1bHRWYWxpZGF0aW9uTG9jYWxlICYmIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmRlZmF1bHRWYWxpZGF0aW9uTG9jYWxlLmFscGhhID8gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24uZGVmYXVsdFZhbGlkYXRpb25Mb2NhbGUuYWxwaGEgOiBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgYWxwaGFMb2NhbGUgJiYgYWxwaGFMb2NhbGUgaW4gYWxwaGFiZXQgPyBhbHBoYWJldFthbHBoYUxvY2FsZV0gOiByZWdFeHBzWzBdLFxyXG4gICAgICAgICAgICAgICAgYWxwaGFMb2NhbGUgJiYgYWxwaGFMb2NhbGUgaW4gYWxwaGFXaXRoV2hpdGVzcGFjZSA/IGFscGhhV2l0aFdoaXRlc3BhY2VbYWxwaGFMb2NhbGVdIDogcmVnRXhwc1sxXVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiYWxwaGFOdW1lcmljXCI6XHJcbiAgICAgICAgICAgIHZhciBhbHBoYU51bWVyaWNMb2NhbGUgPSBjb25maWcubG9jYWxlID8gY29uZmlnLmxvY2FsZSA6IFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uICYmIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmRlZmF1bHRWYWxpZGF0aW9uTG9jYWxlICYmIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmRlZmF1bHRWYWxpZGF0aW9uTG9jYWxlLmFscGhhTnVtZXJpYyA/IFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmRlZmF1bHRWYWxpZGF0aW9uTG9jYWxlLmFscGhhTnVtZXJpYyA6IFwiXCI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgYWxwaGFOdW1lcmljTG9jYWxlICYmIGFscGhhTnVtZXJpY0xvY2FsZSBpbiBhbHBoYW51bWVyaWMgPyBhbHBoYW51bWVyaWNbYWxwaGFOdW1lcmljTG9jYWxlXSA6IHJlZ0V4cHNbMF0sXHJcbiAgICAgICAgICAgICAgICBhbHBoYU51bWVyaWNMb2NhbGUgJiYgYWxwaGFOdW1lcmljTG9jYWxlIGluIGFscGhhbnVtZXJpY1dpdGhXaXRlc3BhY2UgPyBhbHBoYW51bWVyaWNXaXRoV2l0ZXNwYWNlW2FscGhhTnVtZXJpY0xvY2FsZV0gOiByZWdFeHBzWzFdXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbiJdfQ==