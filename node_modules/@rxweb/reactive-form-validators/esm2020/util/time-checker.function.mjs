import { ApplicationUtil } from './app-util';
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { ObjectMaker } from "./object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { OPERATORS } from "../const/operators.const";
import { getConfigObject } from "../util/config-provider";
import { RegExRule } from "./regex-rules";
function runCondition(leftValue, rightValue, operator) {
    let result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
function isValid(control, config) {
    return config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);
}
function getTime(value) {
    let splitTime = (value) ? value.split(':') : [];
    return new Date(1970, 0, 1, splitTime[0] ? splitTime[0] : 0, splitTime[1] ? splitTime[1] : 0, splitTime[2] ? splitTime[2] : 0).getTime();
}
export function timeChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (isValid(control, config)) {
                let crossFormControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
                let crossControlValue = crossFormControl ? getTime(crossFormControl.value) : getTime(config.value);
                let currentControlValue = getTime(control.value);
                let isValid = operationType == AnnotationTypes.minTime ? runCondition(currentControlValue, crossControlValue, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(crossControlValue, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                let additionalValue = { [operationType == AnnotationTypes.minTime ? "min" : "max"]: crossControlValue };
                if (!isValid)
                    return ObjectMaker.toJson(operationType, config, [control.value], additionalValue);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value]);
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL3V0aWwvdGltZS1jaGVja2VyLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFDNUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQTtBQUNsRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxTQUFTLFlBQVksQ0FBQyxTQUFpQixFQUFFLFVBQWtCLEVBQUUsUUFBZ0I7SUFDekUsSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFDO0lBQzVCLFFBQVEsUUFBUSxFQUFFO1FBQ2QsS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQ3hCLEtBQUssU0FBUyxDQUFDLFdBQVc7WUFDdEIsTUFBTSxHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUM7WUFDaEMsTUFBTTtRQUNWLEtBQUssU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUMvQixLQUFLLFNBQVMsQ0FBQyxrQkFBa0I7WUFDN0IsTUFBTSxHQUFHLFNBQVMsSUFBSSxVQUFVLENBQUM7WUFDakMsTUFBTTtLQUNiO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLE9BQXdCLEVBQUUsTUFBVztJ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QUNKO0lBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tICcuL2FwcC11dGlsJ1xyXG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tIFwiLi9mb3JtLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4vcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4vb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHtPUEVSQVRPUlN9IGZyb20gXCIuLi9jb25zdC9vcGVyYXRvcnMuY29uc3RcIlxyXG5pbXBvcnQge2dldENvbmZpZ09iamVjdH0gZnJvbSBcIi4uL3V0aWwvY29uZmlnLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IFJlZ0V4UnVsZSB9IGZyb20gXCIuL3JlZ2V4LXJ1bGVzXCI7XHJcblxyXG5mdW5jdGlvbiBydW5Db25kaXRpb24obGVmdFZhbHVlOiBudW1iZXIsIHJpZ2h0VmFsdWU6IG51bWJlciwgb3BlcmF0b3I6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3dpdGNoIChvcGVyYXRvcikge1xyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmxlc3NUaGFuOlxyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmdyZWF0ZXJUaGFuOlxyXG4gICAgICAgICAgICByZXN1bHQgPSBsZWZ0VmFsdWUgPiByaWdodFZhbHVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5sZXNzVGhhbkVxdWFsVG86XHJcbiAgICAgICAgY2FzZSBPUEVSQVRPUlMuZ3JlYXRlclRoYW5FcXVhbFRvOlxyXG4gICAgICAgICAgICByZXN1bHQgPSBsZWZ0VmFsdWUgPj0gcmlnaHRWYWx1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgY29uZmlnOiBhbnkpIHtcclxuICAgIHJldHVybiBjb25maWcuYWxsb3dTZWNvbmRzID8gUmVnZXhWYWxpZGF0b3IuaXNWYWxpZChjb250cm9sLnZhbHVlLCBSZWdFeFJ1bGUudGltZVdpdGhTZWNvbmRzKSA6IFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQoY29udHJvbC52YWx1ZSwgUmVnRXhSdWxlLnRpbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUaW1lKHZhbHVlOiBhbnkpIHtcclxuICAgIGxldCBzcGxpdFRpbWUgPSAodmFsdWUpID8gdmFsdWUuc3BsaXQoJzonKSA6IFtdO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKDE5NzAsIDAsIDEsIHNwbGl0VGltZVswXSA/IHNwbGl0VGltZVswXSA6IDAsIHNwbGl0VGltZVsxXSA/IHNwbGl0VGltZVsxXSA6IDAsIHNwbGl0VGltZVsyXSA/IHNwbGl0VGltZVsyXSA6IDApLmdldFRpbWUoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVDaGVja2VyKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxjb25maWc6YW55LG9wZXJhdGlvblR5cGU6c3RyaW5nKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnLCBjb250cm9sKTtcclxuICAgICAgaWYgKEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLGNvbmZpZykpIHtcclxuICAgICAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayhjb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNWYWxpZChjb250cm9sLGNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjcm9zc0Zvcm1Db250cm9sID0gY29uZmlnLmZpZWxkTmFtZSA/IEFwcGxpY2F0aW9uVXRpbC5nZXRGb3JtQ29udHJvbChjb25maWcuZmllbGROYW1lLCBjb250cm9sKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGxldCBjcm9zc0NvbnRyb2xWYWx1ZSA9IGNyb3NzRm9ybUNvbnRyb2wgPyBnZXRUaW1lKGNyb3NzRm9ybUNvbnRyb2wudmFsdWUpIDogZ2V0VGltZShjb25maWcudmFsdWUpOyAgXHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudENvbnRyb2xWYWx1ZSA9IGdldFRpbWUoY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNWYWxpZCA9IG9wZXJhdGlvblR5cGUgPT0gQW5ub3RhdGlvblR5cGVzLm1pblRpbWUgPyBydW5Db25kaXRpb24oY3VycmVudENvbnRyb2xWYWx1ZSwgY3Jvc3NDb250cm9sVmFsdWUsIGNvbmZpZy5vcGVyYXRvciB8fCBPUEVSQVRPUlMuZ3JlYXRlclRoYW5FcXVhbFRvKSA6IHJ1bkNvbmRpdGlvbihjcm9zc0NvbnRyb2xWYWx1ZSwgY3VycmVudENvbnRyb2xWYWx1ZSwgY29uZmlnLm9wZXJhdG9yIHx8IE9QRVJBVE9SUy5sZXNzVGhhbkVxdWFsVG8pXHJcbiAgICAgICAgICAgICAgICBsZXQgYWRkaXRpb25hbFZhbHVlPXtbb3BlcmF0aW9uVHlwZSA9PSBBbm5vdGF0aW9uVHlwZXMubWluVGltZSA/IFwibWluXCI6XCJtYXhcIl06Y3Jvc3NDb250cm9sVmFsdWV9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihvcGVyYXRpb25UeXBlLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSxhZGRpdGlvbmFsVmFsdWUgKVxyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24ob3BlcmF0aW9uVHlwZSwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxufSJdfQ==