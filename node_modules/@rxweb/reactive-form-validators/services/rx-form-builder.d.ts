import { FormGroup, FormArray, ValidatorFn, AsyncValidatorFn } from "@angular/forms";
import { Type } from "../util";
import { BaseFormBuilder } from './base-form-builder';
import { FormBuilderConfiguration } from "../models";
import { RxFormGroup } from './rx-form-group';
import { AppFormGroup } from '../models/interface/i-form-group';
import { IAbstractControl } from "../models/interface/i-abstract-control";
import * as i0 from "@angular/core";
export declare class RxFormBuilder extends BaseFormBuilder {
    private nestedProp;
    private conditionalObjectProps;
    private conditionalValidationInstance;
    private builderConfigurationConditionalObjectProps;
    private formGroupPropOtherValidator;
    private currentFormGroupPropOtherValidator;
    private isNested;
    private isGroupCalled;
    private isNestedBinding;
    constructor();
    private getInstanceContainer;
    private setValue;
    private extractExpressions;
    private addAsyncValidation;
    private addFormControl;
    private additionalValidation;
    private getEntity;
    private getObjectPropertyInstance;
    private checkObjectPropAdditionalValidation;
    private getObject;
    control(value?: any, validators?: ValidatorFn[], asyncValidators?: AsyncValidatorFn[]): IAbstractControl;
    array(values: [{
        [key: string]: any;
    }], validatorConfig?: FormBuilderConfiguration): FormArray<import("@angular/forms").AbstractControl<any, any>>;
    group(groupObject: {
        [key: string]: any;
    }, validatorConfig?: FormBuilderConfiguration): FormGroup;
    private applyAllPropValidator;
    private dynamicValidationPropCheck;
    private isNotObject;
    private createValidatorFormGroup;
    private getValidatorConfig;
    private getObjectForProperty;
    private getProps;
    formGroup<T>(model: Type<T> | {
        [key: string]: any;
    }, entityObject?: {
        [key: string]: any;
    } | FormBuilderConfiguration, formBuilderConfiguration?: FormBuilderConfiguration): RxFormGroup | FormGroup | AppFormGroup<T>;
    private overrideProperties;
    private getAbstractControlOptions;
    private overrideProp;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxFormBuilder, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RxFormBuilder>;
}
