import { Directive, Input, Optional, Host, Self } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../components/multiple-file-upload/file-upload.component";
import * as i2 from "../components/simple-file-upload/simple-file-upload.component";
export class FilesDiscardDirective {
    set discard(discard) {
        if (typeof discard === 'string' && (discard === 'true' || discard === 'false')) {
            this.discardValue = JSON.parse(discard.toLowerCase());
        }
        else if (typeof discard === 'boolean') {
            this.discardValue = discard;
        }
        else {
            throw Error(`Provided value in directive [discard]="${discard}" is not boolean.`);
        }
    }
    constructor(fileUpload, simpleFileUpload) {
        this.discardValue = null;
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    ngAfterViewInit() {
        this.setAccept(this.discardValue);
    }
    ngOnChanges(changes) {
        if ('discard' in changes && changes['discard'].currentValue !== changes['discard'].previousValue) {
            this.setAccept(this.discardValue);
        }
    }
    setAccept(discard) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.discardInvalid(discard);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.2", ngImport: i0, type: FilesDiscardDirective, deps: [{ token: i1.FileUploadComponent, host: true, optional: true, self: true }, { token: i2.SimpleFileUploadComponent, host: true, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.2", type: FilesDiscardDirective, isStandalone: true, selector: "file-upload[discard]", inputs: { discard: "discard" }, host: { properties: { "attr.discard": "discard ? discard : null" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.2", ngImport: i0, type: FilesDiscardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'file-upload[discard]',
                    host: { '[attr.discard]': 'discard ? discard : null' },
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.FileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }, { type: i2.SimpleFileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }], propDecorators: { discard: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY2FyZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pcGxhYi9uZ3gtZmlsZS11cGxvYWQvc3JjL2xpYi9kaXJlY3RpdmVzL2Rpc2NhcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBNEIsTUFBTSxlQUFlLENBQUM7Ozs7QUFXaEgsTUFBTSxPQUFPLHFCQUFxQjtJQUk5QixJQUNXLE9BQU8sQ0FBQyxPQUF5QjtRQUN4QyxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLE9BQU8sS0FBSyxNQUFNLElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDN0UsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzFELENBQUM7YUFBTSxJQUFJLE9BQU8sT0FBTyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1FBQ2hDLENBQUM7YUFBTSxDQUFDO1lBQ0osTUFBTSxLQUFLLENBQUMsMENBQTBDLE9BQU8sbUJBQW1CLENBQUMsQ0FBQztRQUN0RixDQUFDO0lBQ0wsQ0FBQztJQUlELFlBQ2dDLFVBQStCLEVBQy9CLGdCQUEyQztRQWpCbkUsaUJBQVksR0FBbUIsSUFBSSxDQUFDO1FBYTNCLGVBQVUsR0FBb0QsSUFBSSxDQUFDO1FBS2hGLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLGdCQUFnQixDQUFDO0lBQ3JELENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQy9GLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLENBQUM7SUFDTCxDQUFDO0lBRU8sU0FBUyxDQUFDLE9BQWdCO1FBQzlCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxDQUFDO0lBQ0wsQ0FBQzs4R0FyQ1EscUJBQXFCO2tHQUFyQixxQkFBcUI7OzJGQUFyQixxQkFBcUI7a0JBTGpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsSUFBSSxFQUFFLEVBQUMsZ0JBQWdCLEVBQUUsMEJBQTBCLEVBQUM7b0JBQ3BELFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7MEJBbUJRLFFBQVE7OzBCQUFJLElBQUk7OzBCQUFJLElBQUk7OzBCQUN4QixRQUFROzswQkFBSSxJQUFJOzswQkFBSSxJQUFJO3lDQWRsQixPQUFPO3NCQURqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT3B0aW9uYWwsIEhvc3QsIFNlbGYsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9tdWx0aXBsZS1maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQvc2ltcGxlLWZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcblxyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWxlLXVwbG9hZFtkaXNjYXJkXScsXHJcbiAgICBob3N0OiB7J1thdHRyLmRpc2NhcmRdJzogJ2Rpc2NhcmQgPyBkaXNjYXJkIDogbnVsbCd9LFxyXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsZXNEaXNjYXJkRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBwcml2YXRlIGRpc2NhcmRWYWx1ZTogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgc2V0IGRpc2NhcmQoZGlzY2FyZDogYm9vbGVhbiB8IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGlzY2FyZCA9PT0gJ3N0cmluZycgJiYgKGRpc2NhcmQgPT09ICd0cnVlJyB8fCBkaXNjYXJkID09PSAnZmFsc2UnKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2NhcmRWYWx1ZSA9IEpTT04ucGFyc2UoZGlzY2FyZC50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkaXNjYXJkID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNjYXJkVmFsdWUgPSBkaXNjYXJkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBQcm92aWRlZCB2YWx1ZSBpbiBkaXJlY3RpdmUgW2Rpc2NhcmRdPVwiJHtkaXNjYXJkfVwiIGlzIG5vdCBib29sZWFuLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpbGVVcGxvYWQ6IEZpbGVVcGxvYWRDb21wb25lbnQgfCBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50ID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBAT3B0aW9uYWwoKSBASG9zdCgpIEBTZWxmKCkgZmlsZVVwbG9hZDogRmlsZVVwbG9hZENvbXBvbmVudCxcclxuICAgICAgICBAT3B0aW9uYWwoKSBASG9zdCgpIEBTZWxmKCkgc2ltcGxlRmlsZVVwbG9hZDogU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMuZmlsZVVwbG9hZCA9IGZpbGVVcGxvYWQgfHwgc2ltcGxlRmlsZVVwbG9hZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0QWNjZXB0KHRoaXMuZGlzY2FyZFZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGlmICgnZGlzY2FyZCcgaW4gY2hhbmdlcyAmJiBjaGFuZ2VzWydkaXNjYXJkJ10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWydkaXNjYXJkJ10ucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEFjY2VwdCh0aGlzLmRpc2NhcmRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0QWNjZXB0KGRpc2NhcmQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5maWxlVXBsb2FkICYmIHRoaXMuZmlsZVVwbG9hZC5jb250cm9sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZVVwbG9hZC5jb250cm9sLmRpc2NhcmRJbnZhbGlkKGRpc2NhcmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=