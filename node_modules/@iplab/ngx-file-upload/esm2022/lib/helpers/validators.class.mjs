import { IsNullOrEmpty } from './helpers.class';
import { FileUploadTypes } from './file-types.class';
/**
 * function used to check file size
 */
const checkFileSize = (actualSize, maxSize, minSize = 0, file) => {
    return (!IsNullOrEmpty(maxSize) && actualSize > maxSize) || actualSize < minSize ?
        { maxSize, minSize, actual: actualSize, file } : null;
};
const getFileType = (file, fileExtension) => {
    const type = file.type;
    if (!IsNullOrEmpty(type)) {
        return type;
    }
    return FileUploadTypes[fileExtension];
};
var CheckType;
(function (CheckType) {
    CheckType[CheckType["ALLOWED"] = 0] = "ALLOWED";
    CheckType[CheckType["NOTALLOWED"] = 1] = "NOTALLOWED";
})(CheckType || (CheckType = {}));
const FILE_EXT_REG = /(^[.]\w*)$/m;
/**
 * function used to check file type
 *
 * #### allowedTypes
 * file_extension|audio/*|video/*|image/*|media_type
 */
const checkFileTypes = (file, types, checkType) => {
    const fileExtension = file.name.split('.').pop().toLowerCase();
    const fileType = getFileType(file, fileExtension);
    for (const type of types) {
        const isFound = FILE_EXT_REG.test(type) ? type === `.${fileExtension}` : new RegExp(type).test(fileType);
        if (isFound) {
            return checkType === CheckType.ALLOWED ? null : { notAllowedTypes: types, actual: fileType, file };
        }
    }
    return checkType === CheckType.ALLOWED ? { allowedTypes: types, actual: fileType, file } : null;
};
const checkValueType = (value) => {
    if (!Array.isArray(value)) {
        throw Error(`FormControl.setValue was provided with wrong argument type, ${value} was provided instead Array<File>`);
    }
};
// @dynamic
export class FileUploadValidators {
    /**
     * Validator that compare the summary size of all files
     */
    static sizeLimit(maxSize) {
        return (control) => {
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            const sum = files.map(file => file.size).reduce((a, b) => a + b, 0);
            const toLargeFiles = checkFileSize(sum, maxSize);
            return toLargeFiles ?
                { 'sizeLimit': toLargeFiles } : null;
        };
    }
    /**
     * Validator that validate individually file maximum size length.
     * Compare the File size in bytes
     * @dynamic
     */
    static fileSize(maxSize) {
        return (control) => {
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            const toLargeFiles = files.map((file) => checkFileSize(file.size, maxSize, 0, file))
                .filter((error) => error);
            return toLargeFiles.length > 0 ?
                { 'fileSize': toLargeFiles } : null;
        };
    }
    /**
     * Compare the File size in bytes with max and min size limits
     * @dynamic
     */
    static sizeRange({ minSize, maxSize }) {
        return (control) => {
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            const sizeMismatch = files.map((file) => checkFileSize(file.size, maxSize, minSize, file))
                .filter((error) => error);
            return sizeMismatch.length > 0 ?
                { 'sizeRange': sizeMismatch } : null;
        };
    }
    /**
     * validator that requires control to have limit on files number
     * @dynamic
     */
    static filesLimit(numFiles) {
        return (control) => {
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            const filesLimit = files.slice(-1 * (files.length - numFiles))
                .map(file => ({ 'max': numFiles, 'actual': files.length, file }));
            return files.length > numFiles ?
                { 'filesLimit': filesLimit } : null;
        };
    }
    /**
     * validator that requires control to have limit on media types
     *
     * ##### Allowed media types are
     *
     * - file_extension - a file extension starting with the STOP character,
     * e.g: .gif, .jpg, .png, .doc
     * - audio/* -        All sound files are accepted
     * - video/* -        All video files are accepted
     * - image/* -        All image files are accepted
     * - media_type -     A valid media type, with no parameters. Look at [IANA Media Types]
     *      (https://www.iana.org/assignments/media-types/media-types.xhtml) for a complete list of standard media types
     *
     * #### Example
     * `FileUploadValidators.accept([file_extension, audio/*, video/*, image/*, media_type])`
     * @dynamic
     */
    static accept(allowedFileTypes) {
        return (control) => {
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            const notAllowedFiles = files.map((file) => checkFileTypes(file, allowedFileTypes, CheckType.ALLOWED))
                .filter((error) => error);
            return notAllowedFiles.length > 0 ?
                { 'fileTypes': notAllowedFiles } : null;
        };
    }
    /**
     * validator that requires control to have limit on media types
     *
     * ##### Not allowed media types are
     *
     * - file_extension - a file extension starting with the STOP character,
     * e.g: .gif, .jpg, .png, .doc
     * - audio/* -        All sound files are accepted
     * - video/* -        All video files are accepted
     * - image/* -        All image files are accepted
     * - media_type -     A valid media type, with no parameters. Look at [IANA Media Types]
     *      (https://www.iana.org/assignments/media-types/media-types.xhtml) for a complete list of standard media types
     *
     * #### Example
     * `FileUploadValidators.reject([file_extension, audio/*, video/*, image/*, media_type])`
     * @dynamic
     */
    static reject(rejectFileTypes) {
        return (control) => {
            const files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            const notAllowedFiles = files.map((file) => checkFileTypes(file, rejectFileTypes, CheckType.NOTALLOWED))
                .filter((error) => error);
            return notAllowedFiles.length > 0 ?
                { 'fileTypes': notAllowedFiles } : null;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,