import { BehaviorSubject, Subject } from 'rxjs';
import { IsNullOrEmpty } from './helpers.class';
export var STATUS;
(function (STATUS) {
    STATUS[STATUS["INVALID"] = 0] = "INVALID";
    STATUS[STATUS["VALID"] = 1] = "VALID";
    STATUS[STATUS["DISABLED"] = 2] = "DISABLED";
})(STATUS || (STATUS = {}));
export var FileEvent;
(function (FileEvent) {
    FileEvent["click"] = "click";
    FileEvent["focus"] = "focus";
    FileEvent["blur"] = "blur";
})(FileEvent || (FileEvent = {}));
export class FileUploadControl {
    constructor(configuration, validators) {
        this.files = new Map();
        this.listVisible = true;
        this.status = STATUS.VALID;
        this.errors = [];
        this.validators = [];
        this.multipleEnabled = true;
        this.nativeBehavior = false;
        this.multipleChanged = new BehaviorSubject(this.multipleEnabled);
        this.statusChanged = new Subject();
        this.eventsChanged = new Subject();
        this.discardedValue = new Subject();
        this.accept = null;
        this.discard = false;
        this.acceptChanged = new BehaviorSubject(this.accept);
        /**
         * track status `VALID`, `INVALID` or `DISABLED`
         */
        this.statusChanges = this.statusChanged.asObservable();
        /**
         * emit an event every time the value of the control
         * changes.
         * Initially returns last value
         */
        this.valueChanges = new BehaviorSubject([]);
        /**
         * @internal
         * used to trigger layout change for list visibility
         */
        this.listVisibilityChanges = new BehaviorSubject(this.listVisible);
        /**
         * track changed on accept attribute
         */
        this.acceptChanges = this.acceptChanged.asObservable();
        /**
         * emit an event every time user programmatically ask for certain event
         */
        this.eventsChanges = this.eventsChanged.asObservable();
        /**
         * track changed on multiple attribute
         */
        this.multipleChanges = this.multipleChanged.asObservable();
        /**
         * track which files were discarded
         */
        this.discardedValueChanges = this.discardedValue.asObservable();
        this.initialState(configuration);
        this.defineValidators(validators);
    }
    /**
     * set functions that determines the synchronous validity of this control.
     */
    setValidators(newValidators) {
        this.defineValidators(newValidators);
        this.validate();
        return this;
    }
    addFile(file) {
        return this.addMultipleFiles([file]);
    }
    removeFile(file) {
        if (IsNullOrEmpty(file)) {
            throw Error(`File has not been provided.`);
        }
        if (!this.disabled) {
            this.files.delete(file.name);
            this.validate();
            this.valueChanges.next(Array.from(this.files.values()));
        }
        return this;
    }
    addFiles(files) {
        return this.addMultipleFiles(Array.from(files));
    }
    get valid() {
        return this.errors.length === 0 && this.status !== STATUS.DISABLED;
    }
    get invalid() {
        return this.errors.length > 0;
    }
    getError() {
        return this.errors;
    }
    /**
     * number of uploaded files
     */
    get size() {
        return this.files.size;
    }
    /**
     * return list of Files
     */
    get value() {
        return Array.from(this.files.values());
    }
    setValue(files) {
        this.files.clear();
        if (files instanceof Array) {
            this.addMultipleFiles(files);
        }
        else {
            throw Error(`FormControl.setValue was provided with wrong argument type, ${files} was provided instead Array<File>`);
        }
        return this;
    }
    /**
     * reset the control
     */
    clear() {
        this.files.clear();
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
        return this;
    }
    get isListVisible() {
        return this.listVisible;
    }
    setListVisibility(isVisible = true) {
        this.listVisible = isVisible;
        this.listVisibilityChanges.next(this.listVisible);
        return this;
    }
    get disabled() {
        return this.status === STATUS.DISABLED;
    }
    enable(isEnabled = true) {
        this.status = isEnabled ? STATUS.VALID : STATUS.DISABLED;
        this.validate();
        this.statusChanged.next(this.status);
        return this;
    }
    disable(isDisabled = true) {
        this.status = isDisabled ? STATUS.DISABLED : STATUS.VALID;
        this.validate();
        this.statusChanged.next(this.status);
        return this;
    }
    click() {
        this.eventsChanged.next(FileEvent.click);
        return this;
    }
    focus() {
        this.eventsChanged.next(FileEvent.focus);
        return this;
    }
    blur() {
        this.eventsChanged.next(FileEvent.blur);
        return this;
    }
    /**
     * specifies the types of files that the server accepts
     *
     * ### Example
     *
     * ```
     * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
     *
     */
    acceptFiles(accept) {
        this.accept = accept;
        this.acceptChanged.next(this.accept);
        return this;
    }
    acceptAll() {
        this.accept = null;
        this.acceptChanged.next(this.accept);
        return this;
    }
    get isMultiple() {
        return this.multipleEnabled;
    }
    multiple(isEnabled = true) {
        this.multipleEnabled = isEnabled;
        this.multipleChanged.next(this.multipleEnabled);
        return this;
    }
    native(isNativeBehaviorEnabled = true) {
        this.nativeBehavior = isNativeBehaviorEnabled;
        return this;
    }
    discardInvalid(discard = true) {
        this.discard = discard;
        return this;
    }
    initialState(configuration = {}) {
        if (IsNullOrEmpty(configuration)) {
            return;
        }
        /**
         * Toggles discard of all invalid files
         * it depends to accept, limit, size once a file
         * dropped or selected it will be discarded if does not satisfy the constraint
         */
        this.discard = configuration.discardInvalid || this.discard;
        this.status = !!configuration.disabled ? STATUS.DISABLED : this.status;
        this.nativeBehavior = configuration.native != null ? configuration.native : this.nativeBehavior;
        if (!IsNullOrEmpty(configuration.multiple)) {
            this.multiple(configuration.multiple);
        }
        if (!IsNullOrEmpty(configuration.listVisible)) {
            this.setListVisibility(configuration.listVisible);
        }
        if (!IsNullOrEmpty(configuration.accept)) {
            this.acceptFiles(configuration.accept.join(','));
        }
    }
    defineValidators(validators) {
        if (!IsNullOrEmpty(validators)) {
            this.validators = Array.isArray(validators) ? [...validators] : [validators];
        }
    }
    /**
     * @internal
     * used to prevent valueChanges emit more times
     * when multiple files are uploaded
     */
    addMultipleFiles(files) {
        if (IsNullOrEmpty(files)) {
            this.validate();
            this.valueChanges.next(Array.from(this.files.values()));
            return this;
        }
        /**
         * native component deletes the list of files before adding new ones
         */
        if (this.nativeBehavior !== false) {
            this.files.clear();
        }
        if (!this.multipleEnabled) {
            /**
             * if multiple is disabled and one file exists
             * clear it and reupload a new one
             */
            if (this.files.size === 1) {
                this.files.clear();
            }
            // add only one file
            this.files.set(files[0].name, files[0]);
        }
        else {
            // replace files with same name
            files.forEach(file => this.files.set(file.name, file));
        }
        if (this.discard) {
            this.analyzeToDiscard();
        }
        else {
            this.validate();
        }
        this.valueChanges.next(Array.from(this.files.values()));
        return this;
    }
    /**
     * method used to discard invalid files
     */
    analyzeToDiscard() {
        const deletedFiles = [];
        const validators = [...this.validators];
        while (validators.length) {
            const validator = validators.shift();
            const error = validator(this);
            if (error) {
                this.discardFile(error, deletedFiles);
            }
        }
        if (deletedFiles.length) {
            this.discardedValue.next(deletedFiles);
        }
    }
    discardFile(error, deletedFiles) {
        const errorsKey = Object.keys(error)[0];
        const errors = error[errorsKey];
        (Array.isArray(errors) ? errors : [errors]).forEach(fileError => {
            if (fileError.file && this.files.has(fileError.file.name)) {
                deletedFiles.push(fileError);
                this.files.delete(fileError.file.name);
            }
            else {
                this.errors.push(error);
            }
        });
    }
    validate() {
        if (this.status !== STATUS.DISABLED) {
            const currentState = this.valid;
            this.errors = this.validators.map((validator) => validator(this)).filter((isInvalid) => isInvalid);
            if (currentState !== this.valid) {
                this.statusChanged.next(this.valid ? STATUS.VALID : STATUS.INVALID);
            }
        }
        else {
            this.errors.length = 0;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,