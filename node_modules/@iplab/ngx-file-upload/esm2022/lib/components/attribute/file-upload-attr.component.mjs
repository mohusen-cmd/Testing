import { Input, HostListener, Inject, ViewChild, ContentChild, Component, } from '@angular/core';
import { DOCUMENT, NgTemplateOutlet, NgComponentOutlet } from '@angular/common';
import { FileUploadControl } from '../../helpers/control.class';
import { IsNullOrEmpty } from '../../helpers/helpers.class';
import { FileUploadService } from '../../services/file-upload.service';
import { DRAGOVER_CLASS_NAME, TOUCHED_CLASS_NAME } from './../multiple-file-upload/file-upload.component';
import { merge } from 'rxjs';
import { FileUploadDropZoneComponent } from './../drop-zone/file-upload-drop-zone.component';
import { HAS_FILES_CLASS_NAME, IS_INVALID_CLASS_NAME } from './../file-upload-abstract.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/file-upload.service";
export class FileUploadAttributeComponent {
    constructor(fileUploadService, hostElementRef, renderer, document) {
        this.fileUploadService = fileUploadService;
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.document = document;
        this.control = null;
        this.templateRef = null;
        this.hooks = [];
        this.subscriptions = [];
        this.onTouch = () => {
            this.renderer.addClass(this.hostElementRef.nativeElement, TOUCHED_CLASS_NAME);
        };
    }
    ngOnInit() {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
        this.subscriptions.push(merge(this.control.listVisibilityChanges, this.control.valueChanges)
            .subscribe(() => this.checkAndSetFilesClass()));
        this.subscriptions.push(merge(this.control.statusChanges, this.control.valueChanges)
            .subscribe(() => this.checkAndSetInvalidClass()));
    }
    ngAfterViewInit() {
        if (this.fileUploadService.isFileDragDropAvailable()) {
            this.setEvents();
            this.checkAndMarkAsDisabled();
        }
    }
    ngOnDestroy() {
        this.hooks.forEach((hook) => hook());
        this.hooks.length = 0;
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.subscriptions.length = 0;
    }
    setEvents() {
        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach((eventName) => {
            this.hooks.push(this.renderer.listen(this.document, eventName, (event) => this.preventDragEvents(event)));
        });
        ['dragover', 'dragenter'].forEach((eventName) => {
            this.hooks.push(this.renderer.listen(this.hostElementRef.nativeElement, eventName, (event) => this.onDragOver(event)));
        });
        ['dragleave', 'dragend', 'drop'].forEach((eventName) => {
            this.hooks.push(this.renderer.listen(this.hostElementRef.nativeElement, eventName, (event) => {
                if (this.control.disabled && eventName === 'dragleave' || eventName !== 'dragleave') {
                    this.onDragLeave(event);
                }
            }));
        });
        ['dragleave'].forEach((eventName) => {
            this.hooks.push(this.renderer.listen(this.overlay.nativeElement, eventName, (event) => this.onDragLeave(event)));
        });
        this.subscriptions.push(this.control.statusChanges.subscribe((status) => this.checkAndMarkAsDisabled()));
    }
    hasFiles() {
        return this.control.isListVisible && this.control.size > 0;
    }
    isInvalid() {
        return !this.control.disabled && this.control.invalid;
    }
    checkAndSetFilesClass() {
        if (this.hasFiles() && this.hostElementRef) {
            this.renderer.addClass(this.hostElementRef.nativeElement, HAS_FILES_CLASS_NAME);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, HAS_FILES_CLASS_NAME);
        }
    }
    checkAndSetInvalidClass() {
        if (this.isInvalid() && this.hostElementRef) {
            this.renderer.addClass(this.hostElementRef.nativeElement, IS_INVALID_CLASS_NAME);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, IS_INVALID_CLASS_NAME);
        }
    }
    checkAndMarkAsDisabled() {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
        }
    }
    preventDragEvents(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    /**
     * on file over add class name
     */
    onDragOver(event) {
        this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER_CLASS_NAME);
    }
    /**
     * on mouse out remove class name
     */
    onDragLeave(event) {
        this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER_CLASS_NAME);
    }
    onDrop(event) {
        if (this.control.disabled) {
            return;
        }
        const files = event.dataTransfer.files;
        this.control.addFiles(files);
        this.onTouch();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.2", ngImport: i0, type: FileUploadAttributeComponent, deps: [{ token: i1.FileUploadService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.2", type: FileUploadAttributeComponent, isStandalone: true, selector: "[file-drop-zone]", inputs: { control: "control" }, host: { listeners: { "drop": "onDrop($event)" } }, providers: [
            FileUploadService,
        ], queries: [{ propertyName: "templateRef", first: true, predicate: ["placeholder"], descendants: true }], viewQueries: [{ propertyName: "overlay", first: true, predicate: ["overlay"], descendants: true }], ngImport: i0, template: `
        <ng-content></ng-content>
        @if (fileUploadService.isFileDragDropAvailable()) {
            <div #overlay class="overlay">
                <div class="upload-input">
                    <ng-container *ngTemplateOutlet="templateRef ? templateRef : defaultTemplate"></ng-container>

                    <ng-template #defaultTemplate>
                        <file-upload-drop-zone>
                            <b>Drop</b> it here
                        </file-upload-drop-zone>
                    </ng-template>
                </div>
            </div>
        }
    `, isInline: true, styles: [":host{position:relative;display:block}:host .overlay{display:none;background:#fffc;outline:2px dashed #92b0b3;outline-offset:-10px;position:absolute;inset:0}:host(.dragover:not(.disabled)) .overlay{display:block}:host ::ng-deep .icon{margin:0 auto 10px}:host ::ng-deep .icon svg{fill:#80a9d2}.upload-input{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-moz-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transition:all .15s ease-in-out;-moz-transition:all .15s ease-in-out;transition:all .15s ease-in-out}\n"], dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: FileUploadDropZoneComponent, selector: "file-upload-drop-zone" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.2", ngImport: i0, type: FileUploadAttributeComponent, decorators: [{
            type: Component,
            args: [{ selector: `[file-drop-zone]`, template: `
        <ng-content></ng-content>
        @if (fileUploadService.isFileDragDropAvailable()) {
            <div #overlay class="overlay">
                <div class="upload-input">
                    <ng-container *ngTemplateOutlet="templateRef ? templateRef : defaultTemplate"></ng-container>

                    <ng-template #defaultTemplate>
                        <file-upload-drop-zone>
                            <b>Drop</b> it here
                        </file-upload-drop-zone>
                    </ng-template>
                </div>
            </div>
        }
    `, providers: [
                        FileUploadService,
                    ], imports: [
                        NgTemplateOutlet,
                        NgComponentOutlet,
                        FileUploadDropZoneComponent
                    ], standalone: true, styles: [":host{position:relative;display:block}:host .overlay{display:none;background:#fffc;outline:2px dashed #92b0b3;outline-offset:-10px;position:absolute;inset:0}:host(.dragover:not(.disabled)) .overlay{display:block}:host ::ng-deep .icon{margin:0 auto 10px}:host ::ng-deep .icon svg{fill:#80a9d2}.upload-input{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-moz-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transition:all .15s ease-in-out;-moz-transition:all .15s ease-in-out;transition:all .15s ease-in-out}\n"] }]
        }], ctorParameters: () => [{ type: i1.FileUploadService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }], propDecorators: { control: [{
                type: Input
            }], overlay: [{
                type: ViewChild,
                args: ['overlay']
            }], templateRef: [{
                type: ContentChild,
                args: ['placeholder']
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,